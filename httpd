#!/usr/bin/perl

  use HTTP::Daemon;
  use HTTP::Status;
  use URI::Split qw(uri_split);
  use bigint;

  my @cache = (0, 1);  # initial cache of previously calculated values
  my %outputcache;  # define response cache of previously requested numbers

  my $daemon = new HTTP::Daemon LocalPort => 54321;
  print "Please connect to me at: <URL:", $daemon->url, ">\n";  # print out where people can connect
  while (my $connection = $daemon->accept) {
      while (my $request = $connection->get_request) {
          my ($scheme, $auth, $path, $query, $frag) = uri_split($request->url->as_string); # split the url to get key value pair
          my ($name, $fibb_num) = split (/num\=\s*/, $query);    # parse num; not ideal, only one variable; dont want a framework
          my $error = '';

          if ($fibb_num !~ /^\d+$/ or $fibb_num < 0) {  # dont allow non numbers or negative numbers
             $error = "number entered is out of range, negative, or not a number";
          }
          
          if ($request->method eq 'GET' and $request->url->path eq "/getfibb" and $error eq '') {
              # do response stuff
              my $response = HTTP::Response->new(RC_OK, "OK");
              $response->header('content-type' => 'text/plain');
              $response->content(dofibb($fibb_num) . "\n");
              $connection->send_response($response);
          } else {
              $connection->send_error(RC_FORBIDDEN, $error)
          }
      }
      $connection->close;
      undef($connection);
  }


sub dofibb {  # I know this won't allow sequences less than 2, but it isn't really a sequence with less than 2
  my $n = shift;
  my $response = "[$x, $y";
  my $start = 3;

  if (exists($outputcache[$n])) {  # check if we have done this specific sequence before, and if so just spit it out
    $response = $outputcache[$n];
    return $response;
  }

  if ($n >= ((scalar @cache) - 1)) {  # prepopulate with cache of previously generated numbers, then generate new numbers
    $start = (scalar @cache) - 1;
    $response = getcache($start);
    my $x = $cache[(scalar @cache) - 2]; # load with last two values from the cache
    my $y = $cache[(scalar @cache) - 1];

    for ( $start .. ($n - 2) ) {  # lower $n by two since we prepopulate the cache by that many, and generate remaining
      ( $x, $y ) = ( $y, $x+$y );
      $response .= ", $y";
      push @cache, $y; # update cache
    }
  } else {
    $response = getcache($n - 1); # just use cache of previously generated numbers
  }

  $response .= "]";

  $outputcache[$n] = $response; # update output cache
  return $response;
}

sub getcache {  # populate response with pre-calcualted values
  my $end = shift;
  my $resp = "[0";

  for (my $i=1; $i <= $end; $i++) {
    $resp .= ", $cache[$i]";
  }

  return $resp;
}
